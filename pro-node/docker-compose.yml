version: '3'

networks:
    extnetwork:
        ipam:
            config:
                - subnet: 172.20.10.0/24
services:

    node_18:
        container_name: node_18 # 容器名称
        image: node:18
        ports:  # 暴露的端口
            - "3000:3000"
            - "8000:8000"
            - "4200:4200"  # angular cli 默认启动端口
        environment: 
            - NODE_ENV=development
        volumes:
            - E:\projects\node\test:/usr/src/app                  # **node.js 专用
            - E:\projects\angular:/usr/src/app/angular
        working_dir: /usr/src/app                                 # ** node.js专用
        # working_dir: /usr/src/angular
        # depends_on: # web服务依靠mysql要先等mysql启动

        restart: on-failure:5 # 自动重启，失败的话重启5次后停止
        # command: npm start # 覆盖容器启动后默认执行的命令
        command: node server.js # 覆盖容器启动后默认执行的命令

        networks:
            extnetwork:
                ipv4_address: 172.20.10.2
 
    mongo:
        image: mongo:4.4-rc
        restart: always
        # restart: unless-stopped
        environment:
            # TZ: 'Asia/Tokyo'
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: root
        container_name: mongodb_44rc
        ports:
            - 27017:27017
        volumes:
            - E:\projects\node\mongo\db:/data/db  ## 注意：E:\projects\node\mongo\db 目录存在的情况下，会因为没有权限而无法启动mongo服务，删除后重新 docker-compose可以解决
        command: --serviceExecutor adaptive
        # command: --replSet rs0 --bind_ip_all --keyFile /data/mongodb/keyFile
        networks:
            extnetwork:
                ipv4_address: 172.20.10.3
# volumes:    # 每次重建 数据不会丢失
    # pgdata:
    #     driver: local  # 可以不写 默认就是本地固定的目录
    # mysqldata:
    #     driver: local